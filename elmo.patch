diff --git a/Gemfile b/Gemfile
index c13dd62..f764045 100644
--- a/Gemfile
+++ b/Gemfile
@@ -11,7 +11,8 @@ source "https://rubygems.org"
 gem "minima", "~> 2.5"
 # If you want to use GitHub Pages, remove the "gem "jekyll"" above and
 # uncomment the line below. To upgrade, run `bundle update github-pages`.
-gem "jekyll"
+gem "jekyll", "~> 4.3.2"
+gem "webrick", "~> 1.7.0"
 #gem "github-pages", group: :jekyll_plugins
 # If you have any plugins, put them here!
 group :jekyll_plugins do

diff --git a/_includes/scripts/main.js b/_includes/scripts/main.js
index 441acb6..ef31275 100644
--- a/_includes/scripts/main.js
+++ b/_includes/scripts/main.js
@@ -17,6 +17,10 @@ const COLOR_ORDER = [
 function init() {
   prepareAd();
   sortTable();
+  setupEventListeners();
+}
+
+function setupEventListeners() {
   id("db-sort").addEventListener("change", sortTable);
   id("db-search").addEventListener("change", applyFilters);
   id("db-section").addEventListener("change", changeSection);
@@ -25,17 +29,28 @@ function init() {
   id("mobile-desc").addEventListener("click", toggleMobileDescription);
   id("db-search").addEventListener("click", mobileSearchInput);
   
-  qsa("#color-filters > div").forEach(item => item.addEventListener("click", () => {
-    item.classList.toggle("color-inactive");
-    item.classList.toggle("color-active");
-    applyFilters();
-  }));
-  
-  qsa("#entry-filters > li").forEach(item => item.addEventListener("click", () => {
-    item.classList.toggle("filter-inactive");
-    item.classList.toggle("filter-active");
-    applyFilters();
-  }));
+  setupColorFilters();
+  setupEntryFilters();
+}
+
+function setupColorFilters() {
+  qsa("#color-filters > div").forEach(item => {
+    item.addEventListener("click", () => {
+      item.classList.toggle("color-inactive");
+      item.classList.toggle("color-active");
+      applyFilters();
+    });
+  });
+}
+
+function setupEntryFilters() {
+  qsa("#entry-filters > li").forEach(item => {
+    item.addEventListener("click", () => {
+      item.classList.toggle("filter-inactive");
+      item.classList.toggle("filter-active");
+      applyFilters();
+    });
+  });
+}
+
+function applyFilters() {
-  const primer = id("primer-only").classList.contains("filter-active");
-  const discord = id("discord-only").classList.contains("filter-active");
-  const section = id("db-section").value;
-  const search = id("db-search").value.toLowerCase();
-  const colors = [];
-  qsa(".color-active").forEach(color => colors.push(color.dataset.c));
-  
+  const filters = {
+    primer: id("primer-only").classList.contains("filter-active"),
+    discord: id("discord-only").classList.contains("filter-active"),
+    section: id("db-section").value,
+    colors: [...qsa(".color-active")].map(color => color.dataset.c)
+  };
+
+  const searchTerm = id("db-search").value.toLowerCase();
+  const isMainPage = filters.section === 'COMPETITIVE';
+  const hasActiveFilters = filters.primer || filters.discord || filters.colors.length > 0 || searchTerm;
+
+   qsa("#decks > li").forEach(deck => {
-    let hide = false;
-      if (primer && iqs(deck, ".ddb-icons .primer-svg").classList.contains("unavailable")) {
-      hide = true;
-    } else if (discord && iqs(deck, ".ddb-icons .discord-svg").classList.contains("unavailable")) {
-      hide = true;
-    } else if (section !== iqs(deck, ".ddb-section").innerText.trim()) {
-      hide = true;
-    } else if (search && !deck.textContent.toLowerCase().includes(search)) {
-      hide = true;
-    } else if (colors) {
-      colors.forEach(color => {
-        if (!deck.dataset.colors.includes(color)) {
-          hide = true;
-          return;
-        }
-      });
+    if (isMainPage && !hasActiveFilters) {
+      // Show all decks on the main page when no filters are active
+      deck.classList.remove("hidden");
+    } else {
+      const matchesFilters = !isHidden(deck, filters);
+      const matchesSearch = searchAllCategories(deck, searchTerm);
+      const showDeck = matchesFilters && matchesSearch;
+      deck.classList.toggle("hidden", !showDeck);
+ }
-    
-    hide ? deck.classList.add("hidden") : deck.classList.remove("hidden");
+   });
+ }

+function searchAllCategories(deck, searchTerm) {
+  if (!searchTerm) {
+    return true; // return all on empty search
+  }
+  
+  const searchableContent = [
+    deck.dataset.title,
+    deck.querySelector('.ddb-description').textContent,
+    deck.dataset.colors,
+    Array.from(iqsa(deck, '.ddb-commanders li')).map(c => c.textContent).join(' '),
+    Array.from(iqsa(deck, '.ddb-decklists li')).map(d => d.textContent).join(' '),
+    iqs(deck, ".ddb-discord-title") ? iqs(deck, ".ddb-discord-title").textContent : ''
+  ].join(' ').toLowerCase();
+
+  return searchableContent.includes(searchTerm);
+}
+
+function isHidden(deck, filters) {
+  if (filters.primer && iqs(deck, ".ddb-icons .primer-svg").classList.contains("unavailable")) {
+    return true;
+  }
+  if (filters.discord && iqs(deck, ".ddb-icons .discord-svg").classList.contains("unavailable")) {
+    return true;
+  }
+  if (filters.colors.length && !filters.colors.every(color => deck.dataset.colors.includes(color))) {
+    return true;
+  }
+  return false;
+}

+ function changeSection() {
+   applyFilters();
+   const section = id("db-section").value.toLowerCase();
-  id("mobile-desc").innerText = section.charAt(0).toUpperCase() + section.slice(1) + " Decks";
+  id("mobile-desc").innerText = section === 'all' ? "All Decks" : section.charAt(0).toUpperCase() + section.slice(1) + " Decks";
+   qsa("#db-description > div").forEach(item => {
-    item.id.includes(section) ? item.classList.remove("hidden") : item.classList.add("hidden");
+    if (section === 'all') {
+      item.classList.remove("hidden");
+    } else {
+      item.id.includes(section) ? item.classList.remove("hidden") : item.classList.add("hidden");
+    }
+   });
+ }

diff --git a/index.html b/index.html
index 5628b44..03ba235 100755
--- a/index.html
+++ b/index.html
@@ -68,9 +68,9 @@ The main page of the cEDH decklist database
+           <div class="flex-column">
+             <label for="db-section">Section</label>
+             <select id="db-section" autocomplete="off">
-              <option value="COMPETITIVE">Competitive Decks</option>
+              <option value="COMPETITIVE">Main Page</option>
+               <option value="BREW">Brewer's Corner</option>
-              <option value="OUTDATED">Outdated Decks</option>
+              <option value="OUTDATED">Database</option>
+             </select>
+           </div>